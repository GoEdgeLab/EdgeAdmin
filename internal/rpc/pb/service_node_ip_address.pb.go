// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_node_ip_address.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建IP地址
type CreateNodeIPAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ip     string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *CreateNodeIPAddressRequest) Reset() {
	*x = CreateNodeIPAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeIPAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeIPAddressRequest) ProtoMessage() {}

func (x *CreateNodeIPAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeIPAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeIPAddressRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNodeIPAddressRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *CreateNodeIPAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeIPAddressRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CreateNodeIPAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId int64 `protobuf:"varint,1,opt,name=addressId,proto3" json:"addressId,omitempty"`
}

func (x *CreateNodeIPAddressResponse) Reset() {
	*x = CreateNodeIPAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeIPAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeIPAddressResponse) ProtoMessage() {}

func (x *CreateNodeIPAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeIPAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeIPAddressResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNodeIPAddressResponse) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

// 修改IP地址
type UpdateNodeIPAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId int64  `protobuf:"varint,1,opt,name=addressId,proto3" json:"addressId,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ip        string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *UpdateNodeIPAddressRequest) Reset() {
	*x = UpdateNodeIPAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeIPAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeIPAddressRequest) ProtoMessage() {}

func (x *UpdateNodeIPAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeIPAddressRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeIPAddressRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNodeIPAddressRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *UpdateNodeIPAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNodeIPAddressRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type UpdateNodeIPAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNodeIPAddressResponse) Reset() {
	*x = UpdateNodeIPAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeIPAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeIPAddressResponse) ProtoMessage() {}

func (x *UpdateNodeIPAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeIPAddressResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeIPAddressResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{3}
}

// 修改IP地址所属节点
type UpdateNodeIPAddressNodeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId int64 `protobuf:"varint,1,opt,name=addressId,proto3" json:"addressId,omitempty"`
	NodeId    int64 `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *UpdateNodeIPAddressNodeIdRequest) Reset() {
	*x = UpdateNodeIPAddressNodeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeIPAddressNodeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeIPAddressNodeIdRequest) ProtoMessage() {}

func (x *UpdateNodeIPAddressNodeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeIPAddressNodeIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeIPAddressNodeIdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateNodeIPAddressNodeIdRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *UpdateNodeIPAddressNodeIdRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type UpdateNodeIPAddressNodeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNodeIPAddressNodeIdResponse) Reset() {
	*x = UpdateNodeIPAddressNodeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeIPAddressNodeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeIPAddressNodeIdResponse) ProtoMessage() {}

func (x *UpdateNodeIPAddressNodeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeIPAddressNodeIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeIPAddressNodeIdResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{5}
}

// 禁用单个IP地址
type DisableNodeIPAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId int64 `protobuf:"varint,1,opt,name=addressId,proto3" json:"addressId,omitempty"`
}

func (x *DisableNodeIPAddressRequest) Reset() {
	*x = DisableNodeIPAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableNodeIPAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableNodeIPAddressRequest) ProtoMessage() {}

func (x *DisableNodeIPAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableNodeIPAddressRequest.ProtoReflect.Descriptor instead.
func (*DisableNodeIPAddressRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{6}
}

func (x *DisableNodeIPAddressRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type DisableNodeIPAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableNodeIPAddressResponse) Reset() {
	*x = DisableNodeIPAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableNodeIPAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableNodeIPAddressResponse) ProtoMessage() {}

func (x *DisableNodeIPAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableNodeIPAddressResponse.ProtoReflect.Descriptor instead.
func (*DisableNodeIPAddressResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{7}
}

// 禁用节点的所有IP地址
type DisableAllIPAddressesWithNodeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *DisableAllIPAddressesWithNodeIdRequest) Reset() {
	*x = DisableAllIPAddressesWithNodeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAllIPAddressesWithNodeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAllIPAddressesWithNodeIdRequest) ProtoMessage() {}

func (x *DisableAllIPAddressesWithNodeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAllIPAddressesWithNodeIdRequest.ProtoReflect.Descriptor instead.
func (*DisableAllIPAddressesWithNodeIdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{8}
}

func (x *DisableAllIPAddressesWithNodeIdRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type DisableAllIPAddressesWithNodeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableAllIPAddressesWithNodeIdResponse) Reset() {
	*x = DisableAllIPAddressesWithNodeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAllIPAddressesWithNodeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAllIPAddressesWithNodeIdResponse) ProtoMessage() {}

func (x *DisableAllIPAddressesWithNodeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAllIPAddressesWithNodeIdResponse.ProtoReflect.Descriptor instead.
func (*DisableAllIPAddressesWithNodeIdResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{9}
}

// 查找单个IP地址
type FindEnabledNodeIPAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId int64 `protobuf:"varint,1,opt,name=addressId,proto3" json:"addressId,omitempty"`
}

func (x *FindEnabledNodeIPAddressRequest) Reset() {
	*x = FindEnabledNodeIPAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeIPAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeIPAddressRequest) ProtoMessage() {}

func (x *FindEnabledNodeIPAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeIPAddressRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeIPAddressRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{10}
}

func (x *FindEnabledNodeIPAddressRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

type FindEnabledNodeIPAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress *NodeIPAddress `protobuf:"bytes,1,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
}

func (x *FindEnabledNodeIPAddressResponse) Reset() {
	*x = FindEnabledNodeIPAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeIPAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeIPAddressResponse) ProtoMessage() {}

func (x *FindEnabledNodeIPAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeIPAddressResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeIPAddressResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{11}
}

func (x *FindEnabledNodeIPAddressResponse) GetIpAddress() *NodeIPAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// 查找节点的所有地址
type FindAllEnabledIPAddressesWithNodeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *FindAllEnabledIPAddressesWithNodeIdRequest) Reset() {
	*x = FindAllEnabledIPAddressesWithNodeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledIPAddressesWithNodeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledIPAddressesWithNodeIdRequest) ProtoMessage() {}

func (x *FindAllEnabledIPAddressesWithNodeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledIPAddressesWithNodeIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledIPAddressesWithNodeIdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{12}
}

func (x *FindAllEnabledIPAddressesWithNodeIdRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type FindAllEnabledIPAddressesWithNodeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*NodeIPAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *FindAllEnabledIPAddressesWithNodeIdResponse) Reset() {
	*x = FindAllEnabledIPAddressesWithNodeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledIPAddressesWithNodeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledIPAddressesWithNodeIdResponse) ProtoMessage() {}

func (x *FindAllEnabledIPAddressesWithNodeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledIPAddressesWithNodeIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledIPAddressesWithNodeIdResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{13}
}

func (x *FindAllEnabledIPAddressesWithNodeIdResponse) GetAddresses() []*NodeIPAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

var File_service_node_ip_address_proto protoreflect.FileDescriptor

var file_service_node_ip_address_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x58, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x3b, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x40, 0x0a, 0x26, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x27, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x6c, 0x6c, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3f, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x22, 0x53, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x44, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x2b, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x32, 0xf7, 0x05, 0x0a, 0x14,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a,
	0x23, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_node_ip_address_proto_rawDescOnce sync.Once
	file_service_node_ip_address_proto_rawDescData = file_service_node_ip_address_proto_rawDesc
)

func file_service_node_ip_address_proto_rawDescGZIP() []byte {
	file_service_node_ip_address_proto_rawDescOnce.Do(func() {
		file_service_node_ip_address_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_node_ip_address_proto_rawDescData)
	})
	return file_service_node_ip_address_proto_rawDescData
}

var file_service_node_ip_address_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_service_node_ip_address_proto_goTypes = []interface{}{
	(*CreateNodeIPAddressRequest)(nil),                  // 0: pb.CreateNodeIPAddressRequest
	(*CreateNodeIPAddressResponse)(nil),                 // 1: pb.CreateNodeIPAddressResponse
	(*UpdateNodeIPAddressRequest)(nil),                  // 2: pb.UpdateNodeIPAddressRequest
	(*UpdateNodeIPAddressResponse)(nil),                 // 3: pb.UpdateNodeIPAddressResponse
	(*UpdateNodeIPAddressNodeIdRequest)(nil),            // 4: pb.UpdateNodeIPAddressNodeIdRequest
	(*UpdateNodeIPAddressNodeIdResponse)(nil),           // 5: pb.UpdateNodeIPAddressNodeIdResponse
	(*DisableNodeIPAddressRequest)(nil),                 // 6: pb.DisableNodeIPAddressRequest
	(*DisableNodeIPAddressResponse)(nil),                // 7: pb.DisableNodeIPAddressResponse
	(*DisableAllIPAddressesWithNodeIdRequest)(nil),      // 8: pb.DisableAllIPAddressesWithNodeIdRequest
	(*DisableAllIPAddressesWithNodeIdResponse)(nil),     // 9: pb.DisableAllIPAddressesWithNodeIdResponse
	(*FindEnabledNodeIPAddressRequest)(nil),             // 10: pb.FindEnabledNodeIPAddressRequest
	(*FindEnabledNodeIPAddressResponse)(nil),            // 11: pb.FindEnabledNodeIPAddressResponse
	(*FindAllEnabledIPAddressesWithNodeIdRequest)(nil),  // 12: pb.FindAllEnabledIPAddressesWithNodeIdRequest
	(*FindAllEnabledIPAddressesWithNodeIdResponse)(nil), // 13: pb.FindAllEnabledIPAddressesWithNodeIdResponse
	(*NodeIPAddress)(nil),                               // 14: pb.NodeIPAddress
}
var file_service_node_ip_address_proto_depIdxs = []int32{
	14, // 0: pb.FindEnabledNodeIPAddressResponse.ipAddress:type_name -> pb.NodeIPAddress
	14, // 1: pb.FindAllEnabledIPAddressesWithNodeIdResponse.addresses:type_name -> pb.NodeIPAddress
	0,  // 2: pb.NodeIPAddressService.createNodeIPAddress:input_type -> pb.CreateNodeIPAddressRequest
	2,  // 3: pb.NodeIPAddressService.updateNodeIPAddress:input_type -> pb.UpdateNodeIPAddressRequest
	4,  // 4: pb.NodeIPAddressService.updateNodeIPAddressNodeId:input_type -> pb.UpdateNodeIPAddressNodeIdRequest
	6,  // 5: pb.NodeIPAddressService.disableNodeIPAddress:input_type -> pb.DisableNodeIPAddressRequest
	8,  // 6: pb.NodeIPAddressService.disableAllIPAddressesWithNodeId:input_type -> pb.DisableAllIPAddressesWithNodeIdRequest
	10, // 7: pb.NodeIPAddressService.findEnabledNodeIPAddress:input_type -> pb.FindEnabledNodeIPAddressRequest
	12, // 8: pb.NodeIPAddressService.findAllEnabledIPAddressesWithNodeId:input_type -> pb.FindAllEnabledIPAddressesWithNodeIdRequest
	1,  // 9: pb.NodeIPAddressService.createNodeIPAddress:output_type -> pb.CreateNodeIPAddressResponse
	3,  // 10: pb.NodeIPAddressService.updateNodeIPAddress:output_type -> pb.UpdateNodeIPAddressResponse
	5,  // 11: pb.NodeIPAddressService.updateNodeIPAddressNodeId:output_type -> pb.UpdateNodeIPAddressNodeIdResponse
	7,  // 12: pb.NodeIPAddressService.disableNodeIPAddress:output_type -> pb.DisableNodeIPAddressResponse
	9,  // 13: pb.NodeIPAddressService.disableAllIPAddressesWithNodeId:output_type -> pb.DisableAllIPAddressesWithNodeIdResponse
	11, // 14: pb.NodeIPAddressService.findEnabledNodeIPAddress:output_type -> pb.FindEnabledNodeIPAddressResponse
	13, // 15: pb.NodeIPAddressService.findAllEnabledIPAddressesWithNodeId:output_type -> pb.FindAllEnabledIPAddressesWithNodeIdResponse
	9,  // [9:16] is the sub-list for method output_type
	2,  // [2:9] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_node_ip_address_proto_init() }
func file_service_node_ip_address_proto_init() {
	if File_service_node_ip_address_proto != nil {
		return
	}
	file_model_node_ip_address_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_node_ip_address_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeIPAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeIPAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeIPAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeIPAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeIPAddressNodeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeIPAddressNodeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableNodeIPAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableNodeIPAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAllIPAddressesWithNodeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAllIPAddressesWithNodeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeIPAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeIPAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledIPAddressesWithNodeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledIPAddressesWithNodeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_node_ip_address_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_node_ip_address_proto_goTypes,
		DependencyIndexes: file_service_node_ip_address_proto_depIdxs,
		MessageInfos:      file_service_node_ip_address_proto_msgTypes,
	}.Build()
	File_service_node_ip_address_proto = out.File
	file_service_node_ip_address_proto_rawDesc = nil
	file_service_node_ip_address_proto_goTypes = nil
	file_service_node_ip_address_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeIPAddressServiceClient is the client API for NodeIPAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeIPAddressServiceClient interface {
	// 创建IP地址
	CreateNodeIPAddress(ctx context.Context, in *CreateNodeIPAddressRequest, opts ...grpc.CallOption) (*CreateNodeIPAddressResponse, error)
	// 修改IP地址
	UpdateNodeIPAddress(ctx context.Context, in *UpdateNodeIPAddressRequest, opts ...grpc.CallOption) (*UpdateNodeIPAddressResponse, error)
	// 修改IP地址所属节点
	UpdateNodeIPAddressNodeId(ctx context.Context, in *UpdateNodeIPAddressNodeIdRequest, opts ...grpc.CallOption) (*UpdateNodeIPAddressNodeIdResponse, error)
	// 禁用单个IP地址
	DisableNodeIPAddress(ctx context.Context, in *DisableNodeIPAddressRequest, opts ...grpc.CallOption) (*DisableNodeIPAddressResponse, error)
	// 禁用节点的所有IP地址
	DisableAllIPAddressesWithNodeId(ctx context.Context, in *DisableAllIPAddressesWithNodeIdRequest, opts ...grpc.CallOption) (*DisableAllIPAddressesWithNodeIdResponse, error)
	// 查找单个IP地址
	FindEnabledNodeIPAddress(ctx context.Context, in *FindEnabledNodeIPAddressRequest, opts ...grpc.CallOption) (*FindEnabledNodeIPAddressResponse, error)
	// 查找节点的所有地址
	FindAllEnabledIPAddressesWithNodeId(ctx context.Context, in *FindAllEnabledIPAddressesWithNodeIdRequest, opts ...grpc.CallOption) (*FindAllEnabledIPAddressesWithNodeIdResponse, error)
}

type nodeIPAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeIPAddressServiceClient(cc grpc.ClientConnInterface) NodeIPAddressServiceClient {
	return &nodeIPAddressServiceClient{cc}
}

func (c *nodeIPAddressServiceClient) CreateNodeIPAddress(ctx context.Context, in *CreateNodeIPAddressRequest, opts ...grpc.CallOption) (*CreateNodeIPAddressResponse, error) {
	out := new(CreateNodeIPAddressResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeIPAddressService/createNodeIPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeIPAddressServiceClient) UpdateNodeIPAddress(ctx context.Context, in *UpdateNodeIPAddressRequest, opts ...grpc.CallOption) (*UpdateNodeIPAddressResponse, error) {
	out := new(UpdateNodeIPAddressResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeIPAddressService/updateNodeIPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeIPAddressServiceClient) UpdateNodeIPAddressNodeId(ctx context.Context, in *UpdateNodeIPAddressNodeIdRequest, opts ...grpc.CallOption) (*UpdateNodeIPAddressNodeIdResponse, error) {
	out := new(UpdateNodeIPAddressNodeIdResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeIPAddressService/updateNodeIPAddressNodeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeIPAddressServiceClient) DisableNodeIPAddress(ctx context.Context, in *DisableNodeIPAddressRequest, opts ...grpc.CallOption) (*DisableNodeIPAddressResponse, error) {
	out := new(DisableNodeIPAddressResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeIPAddressService/disableNodeIPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeIPAddressServiceClient) DisableAllIPAddressesWithNodeId(ctx context.Context, in *DisableAllIPAddressesWithNodeIdRequest, opts ...grpc.CallOption) (*DisableAllIPAddressesWithNodeIdResponse, error) {
	out := new(DisableAllIPAddressesWithNodeIdResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeIPAddressService/disableAllIPAddressesWithNodeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeIPAddressServiceClient) FindEnabledNodeIPAddress(ctx context.Context, in *FindEnabledNodeIPAddressRequest, opts ...grpc.CallOption) (*FindEnabledNodeIPAddressResponse, error) {
	out := new(FindEnabledNodeIPAddressResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeIPAddressService/findEnabledNodeIPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeIPAddressServiceClient) FindAllEnabledIPAddressesWithNodeId(ctx context.Context, in *FindAllEnabledIPAddressesWithNodeIdRequest, opts ...grpc.CallOption) (*FindAllEnabledIPAddressesWithNodeIdResponse, error) {
	out := new(FindAllEnabledIPAddressesWithNodeIdResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeIPAddressService/findAllEnabledIPAddressesWithNodeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeIPAddressServiceServer is the server API for NodeIPAddressService service.
type NodeIPAddressServiceServer interface {
	// 创建IP地址
	CreateNodeIPAddress(context.Context, *CreateNodeIPAddressRequest) (*CreateNodeIPAddressResponse, error)
	// 修改IP地址
	UpdateNodeIPAddress(context.Context, *UpdateNodeIPAddressRequest) (*UpdateNodeIPAddressResponse, error)
	// 修改IP地址所属节点
	UpdateNodeIPAddressNodeId(context.Context, *UpdateNodeIPAddressNodeIdRequest) (*UpdateNodeIPAddressNodeIdResponse, error)
	// 禁用单个IP地址
	DisableNodeIPAddress(context.Context, *DisableNodeIPAddressRequest) (*DisableNodeIPAddressResponse, error)
	// 禁用节点的所有IP地址
	DisableAllIPAddressesWithNodeId(context.Context, *DisableAllIPAddressesWithNodeIdRequest) (*DisableAllIPAddressesWithNodeIdResponse, error)
	// 查找单个IP地址
	FindEnabledNodeIPAddress(context.Context, *FindEnabledNodeIPAddressRequest) (*FindEnabledNodeIPAddressResponse, error)
	// 查找节点的所有地址
	FindAllEnabledIPAddressesWithNodeId(context.Context, *FindAllEnabledIPAddressesWithNodeIdRequest) (*FindAllEnabledIPAddressesWithNodeIdResponse, error)
}

// UnimplementedNodeIPAddressServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeIPAddressServiceServer struct {
}

func (*UnimplementedNodeIPAddressServiceServer) CreateNodeIPAddress(context.Context, *CreateNodeIPAddressRequest) (*CreateNodeIPAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeIPAddress not implemented")
}
func (*UnimplementedNodeIPAddressServiceServer) UpdateNodeIPAddress(context.Context, *UpdateNodeIPAddressRequest) (*UpdateNodeIPAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeIPAddress not implemented")
}
func (*UnimplementedNodeIPAddressServiceServer) UpdateNodeIPAddressNodeId(context.Context, *UpdateNodeIPAddressNodeIdRequest) (*UpdateNodeIPAddressNodeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeIPAddressNodeId not implemented")
}
func (*UnimplementedNodeIPAddressServiceServer) DisableNodeIPAddress(context.Context, *DisableNodeIPAddressRequest) (*DisableNodeIPAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableNodeIPAddress not implemented")
}
func (*UnimplementedNodeIPAddressServiceServer) DisableAllIPAddressesWithNodeId(context.Context, *DisableAllIPAddressesWithNodeIdRequest) (*DisableAllIPAddressesWithNodeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAllIPAddressesWithNodeId not implemented")
}
func (*UnimplementedNodeIPAddressServiceServer) FindEnabledNodeIPAddress(context.Context, *FindEnabledNodeIPAddressRequest) (*FindEnabledNodeIPAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledNodeIPAddress not implemented")
}
func (*UnimplementedNodeIPAddressServiceServer) FindAllEnabledIPAddressesWithNodeId(context.Context, *FindAllEnabledIPAddressesWithNodeIdRequest) (*FindAllEnabledIPAddressesWithNodeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledIPAddressesWithNodeId not implemented")
}

func RegisterNodeIPAddressServiceServer(s *grpc.Server, srv NodeIPAddressServiceServer) {
	s.RegisterService(&_NodeIPAddressService_serviceDesc, srv)
}

func _NodeIPAddressService_CreateNodeIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeIPAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeIPAddressServiceServer).CreateNodeIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeIPAddressService/CreateNodeIPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeIPAddressServiceServer).CreateNodeIPAddress(ctx, req.(*CreateNodeIPAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeIPAddressService_UpdateNodeIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeIPAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeIPAddressServiceServer).UpdateNodeIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeIPAddressService/UpdateNodeIPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeIPAddressServiceServer).UpdateNodeIPAddress(ctx, req.(*UpdateNodeIPAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeIPAddressService_UpdateNodeIPAddressNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeIPAddressNodeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeIPAddressServiceServer).UpdateNodeIPAddressNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeIPAddressService/UpdateNodeIPAddressNodeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeIPAddressServiceServer).UpdateNodeIPAddressNodeId(ctx, req.(*UpdateNodeIPAddressNodeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeIPAddressService_DisableNodeIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableNodeIPAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeIPAddressServiceServer).DisableNodeIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeIPAddressService/DisableNodeIPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeIPAddressServiceServer).DisableNodeIPAddress(ctx, req.(*DisableNodeIPAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeIPAddressService_DisableAllIPAddressesWithNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAllIPAddressesWithNodeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeIPAddressServiceServer).DisableAllIPAddressesWithNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeIPAddressService/DisableAllIPAddressesWithNodeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeIPAddressServiceServer).DisableAllIPAddressesWithNodeId(ctx, req.(*DisableAllIPAddressesWithNodeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeIPAddressService_FindEnabledNodeIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledNodeIPAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeIPAddressServiceServer).FindEnabledNodeIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeIPAddressService/FindEnabledNodeIPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeIPAddressServiceServer).FindEnabledNodeIPAddress(ctx, req.(*FindEnabledNodeIPAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeIPAddressService_FindAllEnabledIPAddressesWithNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledIPAddressesWithNodeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeIPAddressServiceServer).FindAllEnabledIPAddressesWithNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeIPAddressService/FindAllEnabledIPAddressesWithNodeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeIPAddressServiceServer).FindAllEnabledIPAddressesWithNodeId(ctx, req.(*FindAllEnabledIPAddressesWithNodeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeIPAddressService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NodeIPAddressService",
	HandlerType: (*NodeIPAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNodeIPAddress",
			Handler:    _NodeIPAddressService_CreateNodeIPAddress_Handler,
		},
		{
			MethodName: "updateNodeIPAddress",
			Handler:    _NodeIPAddressService_UpdateNodeIPAddress_Handler,
		},
		{
			MethodName: "updateNodeIPAddressNodeId",
			Handler:    _NodeIPAddressService_UpdateNodeIPAddressNodeId_Handler,
		},
		{
			MethodName: "disableNodeIPAddress",
			Handler:    _NodeIPAddressService_DisableNodeIPAddress_Handler,
		},
		{
			MethodName: "disableAllIPAddressesWithNodeId",
			Handler:    _NodeIPAddressService_DisableAllIPAddressesWithNodeId_Handler,
		},
		{
			MethodName: "findEnabledNodeIPAddress",
			Handler:    _NodeIPAddressService_FindEnabledNodeIPAddress_Handler,
		},
		{
			MethodName: "findAllEnabledIPAddressesWithNodeId",
			Handler:    _NodeIPAddressService_FindAllEnabledIPAddressesWithNodeId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_node_ip_address.proto",
}
